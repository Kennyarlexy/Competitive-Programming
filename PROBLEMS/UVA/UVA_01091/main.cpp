#include <bits/stdc++.h>
#define ll long long
using namespace std;

ll A[200];
map<string, string> MP = {
    {"00001", "0"},
    {"10001", "1"},
    {"01001", "2"},
    {"11000", "3"},
    {"00101", "4"},
    {"10100", "5"},
    {"01100", "6"},
    {"00011", "7"},
    {"10010", "8"},
    {"10000", "9"},
    {"00100", "-"},
    {"00110", ""}
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll m;
    ll t = 0;
    while (true) {
        cin >> m;
        if (m == 0) break;
        ll _min = LONG_LONG_MAX, _max = LONG_LONG_MIN;
        for (ll i = 0; i < m; i++) {
            cin >> A[i];
            _min = min(_min, A[i]);
            _max = max(_max, A[i]);
        }
        bool OK = true;

        if (95*_max > 210*_min)
            OK = false;
        
        string s;
        ll minWide = LONG_LONG_MAX, maxNarrow = LONG_LONG_MIN;
        for (ll i = 0; i < m; i++) {
            if (95*A[i] <= 105*_min) {
                s += "0";
                maxNarrow = max(maxNarrow, A[i]);
            } else if (105*A[i] >= 95*_max) {
                s += "1";
                minWide = min(minWide, A[i]);
            } else OK = false;
        }

        if (105*minWide < 190*maxNarrow) 
            OK = false;

        if (s.substr(0, 5) != "00110") 
            reverse(s.begin(), s.end());

        if (s.substr(0, 5) != "00110" || s.substr(s.length()-5, 5) != "00110") 
            OK = false;

        for (ll i = 5; i < s.length(); i+=6) {
            if (s[i] != '0') {
                OK = false;
                break;
            }
        }
        
        string decode;
        ll cnt_start_stop = 0;
        for (ll i = 0; i < s.length(); i+=6) {
            string t = s.substr(i, 5);
            if (MP.find(t) == MP.end()) {
                OK = false;
                break;
            } else {
                decode += MP[t];
                if (MP[t] == "") cnt_start_stop++;
            }
        }
        if (cnt_start_stop > 2) 
            OK = false;

        ll C = 0, K = 0, n = decode.length()-2;

        for (ll i = 0; i < n; i++) {
            ll weight = (decode[i] == '-' ? 10 : decode[i] - '0');
            C += ((n-(i+1)) % 10 + 1) * weight;
        }

        for (ll i = 0; i < n+1; i++) {
            ll weight = (decode[i] == '-' ? 10 : decode[i] - '0');
            K += ((n-i) % 9 + 1) * weight;
        }

        C = C % 11;
        K = K % 11;
        ll wC = (decode[n] == '-' ? 10 : decode[n] - '0');
        ll wK = (decode[n+1] == '-' ? 10 : decode[n+1] - '0');

        cout << "Case " << ++t << ": ";
        if (!OK || (m-23)/6 != (m-18)/6) {
            cout << "bad code\n";
        } else if (C != wC) {
            cout << "bad C\n";
        } else if (K != wK) {
            cout << "bad K\n";
        } else {
            cout << decode.substr(0, n) << "\n";
        }
    }
    
    return 0;
}

/*
59
10 20 20 10 10 10 20 10 10 20
10 10 10 10 20 10 20 10 10 10
20 10 20 10 20 10 20 10 10 10
10 10 20 10 10 10 10 10 10 20
20 10 20 10 10 20 10 10 20 10
10 10 20 10 10 20 20 10 10
35
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10
35
10 10 20 20 10 10 20 10 10 10
20 10 10 20 10 10 20 10 10 10
20 10 20 10 20 10 10 10 10 10
10 10 20 20 10
0

59
10 20 20 10 10 10 20 10 10 20
10 10 10 10 20 10 20 10 10 10
20 10 20 10 20 10 20 10 10 10
10 10 20 10 10 10 10 10 10 20
20 10 20 10 10 20 10 10 20 10
10 10 20 10 10 20 20 10 20
35
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10
35
10 10 20 20 10 10 20 10 10 10
20 10 10 20 10 10 20 10 10 10
20 10 20 10 20 10 10 10 10 10
10 10 20 20 10
0

58
10 20 20 10 10 10 20 10 10 20
10 10 10 10 20 10 20 10 10 10
20 10 20 10 20 10 20 10 10 10
10 10 20 10 10 10 10 10 10 20
20 10 20 10 10 20 10 10 20 10
10 10 20 10 10 20 20 10
35
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10
35
10 10 20 20 10 10 20 10 10 10
20 10 10 20 10 10 20 10 10 10
20 10 20 10 20 10 10 10 10 10
10 10 20 20 10
0

65
10 20 20 10 10 10 20 10 10 20
10 10 10 10 20 10 20 10 10 10
20 10 20 10 20 10 20 10 10 10
10 10 20 10 10 10 10 10 10 20
20 10 20 10 10 20 10 10 20 10
10 10 20 10 10 20 20 10 10 10
10 20 20 10 10
35
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
10 10 10 10 10
35
10 10 20 20 10 10 20 10 10 10
20 10 10 20 10 10 20 10 10 10
20 10 20 10 20 10 10 10 10 10
10 10 20 20 10
0

41
1 1 2 2 1 1
1 2 2 1 1 1
1 2 2 1 1 1
1 2 2 1 1 1
2 2 1 1 1 1
1 2 1 1 2 1
1 1 2 2 1
0

13
100 101 102 103 104 105 150 190 192 194 196 198 200
0

25
95 96 97 98 99 100 101 102 103 104 105 106
150
188 190 192 194 196 198 200 202 204 206 208 210
0

6
100 105 106 189 190 200
0
*/

